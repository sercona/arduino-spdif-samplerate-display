#include "Arduino.h"
#include <U8glib.h>

#include "oled_bitmaps.h"


//#define input_select_digital_width 32
//#define input_select_digital_height 20
unsigned char input_select_digital_icon_bits[] U8G_PROGMEM = {
  0x00, 0x00, 0xfc, 0x7f, 0x00, 0x00, 0x04, 0xe0, 0x00, 0x00, 0x04, 0xec,
  0x00, 0x00, 0x04, 0xec, 0xf3, 0x3c, 0x04, 0xe0, 0xf3, 0x3c, 0x04, 0xe0,
  0x92, 0x24, 0x04, 0xec, 0x92, 0x24, 0x14, 0xec, 0x92, 0x24, 0x34, 0xe0,
  0x92, 0x24, 0xf4, 0xe0, 0x92, 0xa4, 0xff, 0xed, 0x92, 0x24, 0xf4, 0xec,
  0x92, 0x24, 0x34, 0xe0, 0x92, 0x24, 0x14, 0xe0, 0x92, 0x24, 0x04, 0xec,
  0x9e, 0x67, 0x04, 0xec, 0x9e, 0x67, 0x04, 0xe0, 0x00, 0x00, 0x04, 0xe0,
  0x00, 0x00, 0xfc, 0xff, 0x00, 0x00, 0xf0, 0xff, };


//#define input_select_analog_width 32
//#define input_select_analog_height 20
unsigned char input_select_analog_icon_bits[] U8G_PROGMEM = {
  0x00, 0x00, 0xfc, 0x7f, 0x00, 0x00, 0x04, 0xe0, 0x00, 0x18, 0x04, 0xec,
  0x00, 0x24, 0x04, 0xec, 0x00, 0x66, 0x04, 0xe0, 0x00, 0x42, 0x04, 0xe0,
  0x00, 0x42, 0x04, 0xec, 0x00, 0x81, 0x14, 0xec, 0x55, 0x55, 0x35, 0xe0,
  0x02, 0x01, 0xf4, 0xe0, 0x84, 0x80, 0xff, 0xed, 0x84, 0x00, 0xf4, 0xec,
  0xcc, 0x00, 0x34, 0xe0, 0x48, 0x00, 0x14, 0xe0, 0x30, 0x00, 0x04, 0xec,
  0x00, 0x00, 0x04, 0xec, 0x00, 0x00, 0x04, 0xe0, 0x00, 0x00, 0x04, 0xe0,
  0x00, 0x00, 0xfc, 0xff, 0x00, 0x00, 0xf0, 0xff, };


/*
 * speaker icons
 */

// MUTED

//#define speaker_muted_width 32
//#define speaker_muted_height 20
unsigned char speaker_muted_icon_bits[] U8G_PROGMEM = {
  0x00, 0xfe, 0x03, 0x00, 0x80, 0x03, 0x0f, 0x00, 0xc0, 0x80, 0x19, 0x00,
  0xe0, 0xc1, 0x31, 0x00, 0x30, 0x63, 0x61, 0x00, 0x10, 0x36, 0x41, 0x00,
  0xd8, 0x1f, 0xc1, 0x00, 0xc8, 0x1f, 0x81, 0x00, 0xc8, 0x37, 0x81, 0x00,
  0xc8, 0x67, 0x81, 0x00, 0xc8, 0xc7, 0x81, 0x00, 0xc8, 0x87, 0x81, 0x00,
  0xc8, 0x0f, 0x83, 0x00, 0xd8, 0x1f, 0xc7, 0x00, 0x10, 0x30, 0x4d, 0x00,
  0x30, 0x60, 0x79, 0x00, 0x60, 0xc0, 0x31, 0x00, 0xc0, 0x80, 0x19, 0x00,
  0x80, 0x03, 0x0f, 0x00, 0x00, 0xfe, 0x03, 0x00, };


// UN-MUTED, playing

//#define speaker_playing_width 32
//#define speaker_playing_height 20
unsigned char speaker_playing_icon_bits[] U8G_PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00,
  0x00, 0xc0, 0x41, 0x00, 0x00, 0x60, 0xc1, 0x00, 0x00, 0x30, 0x89, 0x00,
  0xc0, 0x1f, 0x91, 0x01, 0xc0, 0x0f, 0x31, 0x01, 0xc0, 0x07, 0x21, 0x01,
  0xc0, 0x07, 0x21, 0x01, 0xc0, 0x07, 0x21, 0x01, 0xc0, 0x07, 0x31, 0x01,
  0xc0, 0x0f, 0x91, 0x01, 0xc0, 0x1f, 0x89, 0x00, 0x00, 0x30, 0xc1, 0x00,
  0x00, 0x60, 0x41, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, };



/*
 * alarm clock icon
 */

//#define alarm_icon_1_width 32
//#define alarm_icon_1_height 37
unsigned char alarm_icon_1_bits[] U8G_PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0xc0, 0x07, 0xe0, 0x01, 0xf0, 0x0f, 0xf8, 0x07,
  0xf8, 0x1f, 0xfc, 0x0f, 0xfc, 0x3f, 0xfe, 0x1f, 0xfc, 0xf7, 0xf7, 0x3f,
  0xfe, 0xfc, 0x9f, 0x3f, 0x7e, 0xff, 0x7f, 0x3f, 0xbe, 0x0f, 0xf8, 0x3e,
  0xde, 0x83, 0xe0, 0x3d, 0xfe, 0x80, 0x80, 0x3f, 0x7e, 0x80, 0x00, 0x3f,
  0x38, 0x80, 0x00, 0x0e, 0x3c, 0x80, 0x00, 0x1c, 0x1c, 0x80, 0x00, 0x1c,
  0x1c, 0x80, 0x00, 0x38, 0x0e, 0x80, 0x00, 0x38, 0x0e, 0x80, 0x00, 0x38,
  0x0e, 0xc0, 0x01, 0x38, 0x06, 0xe0, 0xff, 0x30, 0x06, 0xe0, 0xff, 0x30,
  0x06, 0xc0, 0x01, 0x30, 0x0e, 0x00, 0x00, 0x38, 0x0e, 0x00, 0x00, 0x38,
  0x1e, 0x00, 0x00, 0x3c, 0x1c, 0x00, 0x00, 0x1c, 0x3c, 0x00, 0x00, 0x1e,
  0x78, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x80, 0x0f, 0xf0, 0x03, 0xe0, 0x07,
  0xe0, 0x0f, 0xf8, 0x03, 0xe0, 0x1f, 0xfc, 0x03, 0xe0, 0xff, 0xff, 0x03,
  0xf0, 0xfe, 0xbf, 0x07, 0xf0, 0xf0, 0x87, 0x07, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00
};


#define WIDTH      5
#define HEIGHT     6
#define LEFT_EDGE 36

static byte i, x, y;


static void
_draw_sercona_logo (void)
{
   int y_offset=3;

   
  // optionally turn screen around 180
#ifdef SCREEN_180
  u8g.setRot180();
#endif

  u8g.setFont(u8g_font_courB18);
  u8g.setFontRefHeightExtendedText();
  u8g.setFontPosTop();

  u8g.drawStr(11, 47, "Sercona");

  x = LEFT_EDGE; y = 0+y_offset;
  u8g.drawRFrame(LEFT_EDGE - 4, y, 64, 44, 8);

  // top chip-select trace
  x = LEFT_EDGE; y = 6+y_offset;
  u8g.drawLine(x, y, x + WIDTH, y);   x += WIDTH;
  u8g.drawLine(x, y, x, y + HEIGHT);  y += HEIGHT;

  u8g.drawLine(x, y, x + 45, y);  x += 45;

  u8g.drawLine(x, y, x, y - HEIGHT);  y -= HEIGHT;
  u8g.drawLine(x, y, x + WIDTH, y);   x += WIDTH;

  // middle clock trace
  x = LEFT_EDGE; y = 18+y_offset;
  for (i = 1; i <= 5; i++) {
    u8g.drawLine(x, y, x + WIDTH, y);   x += WIDTH;
    u8g.drawLine(x, y, x, y + HEIGHT);  y += HEIGHT;
    u8g.drawLine(x, y, x + WIDTH, y);   x += WIDTH;
    u8g.drawLine(x, y, x, y - HEIGHT);  y -= HEIGHT;
  }
  u8g.drawLine(x, y, x + WIDTH, y);

  // bottom data trace
  x = LEFT_EDGE; y = 30+y_offset;
  u8g.drawLine(x, y, x + WIDTH * 4, y);  x += (WIDTH * 4); // 1
  u8g.drawLine(x, y, x, y + HEIGHT);  y += HEIGHT;         // 2
  u8g.drawLine(x, y, x + WIDTH, y);  x += WIDTH;           // 3
  u8g.drawLine(x, y, x, y - HEIGHT);  y -= HEIGHT;         // 4
  u8g.drawLine(x, y, x + WIDTH, y);  x += WIDTH;           // 5
  u8g.drawLine(x, y, x, y + HEIGHT);  y += HEIGHT;         // 6
  u8g.drawLine(x, y, x + WIDTH * 4, y);  x += (WIDTH * 4); // 7
  u8g.drawLine(x, y, x, y - HEIGHT);  y -= HEIGHT;         // 8
  u8g.drawLine(x, y, x + WIDTH, y);  x += WIDTH;           // 9

  return;
}


void
oled_draw_logo_loop (void)
{
  u8g.firstPage();

  do {
    _draw_sercona_logo();
  } while (u8g.nextPage());

  return;
}
